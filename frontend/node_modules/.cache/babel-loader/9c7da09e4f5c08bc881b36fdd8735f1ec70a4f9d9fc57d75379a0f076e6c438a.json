{"ast":null,"code":"import axios from 'axios';\n\n// Use relative base URL so CRA proxy forwards to backend (see package.json \"proxy\")\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\n// Do NOT set a global Content-Type, so FormData uploads can set proper boundaries\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Attach Authorization header if token exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const expenseAPI = {\n  // Transaction endpoints\n  getTransactions: (params = {}) => api.get('/api/transactions/', {\n    params\n  }),\n  createTransaction: txn => api.post('/api/transactions/', txn, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  saveTransactions: transactions => api.post('/api/transactions/batch', {\n    items: transactions\n  }, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  filterTransactions: filters => api.get('/api/transactions/filter', {\n    params: filters\n  }),\n  deleteAllTransactions: () => api.delete('/api/transactions/'),\n  // Analytics endpoints\n  getWeeklyAnalytics: (weeks = 4) => api.get('/api/transactions/analytics/weekly', {\n    params: {\n      weeks\n    }\n  }),\n  getMonthlyAnalytics: (months = 12) => api.get('/api/transactions/analytics/monthly', {\n    params: {\n      months\n    }\n  }),\n  getCategoryAnalytics: (days = 30) => api.get('/api/transactions/analytics/categories', {\n    params: {\n      period_days: days\n    }\n  }),\n  getCategoriesByMonth: (mm, year = undefined) => api.get('/api/transactions/analytics/categories-by-month', {\n    params: {\n      mm,\n      year\n    }\n  }),\n  getSpendingSummary: (days = 30) => api.get('/api/transactions/analytics/summary', {\n    params: {\n      period_days: days\n    }\n  }),\n  getCalendarData: (year, month) => api.get('/api/transactions/analytics/calendar', {\n    params: {\n      year,\n      month\n    }\n  }),\n  getByMonth: (mm, year = undefined) => api.get('/api/transactions/analytics/by-month', {\n    params: {\n      mm,\n      year\n    }\n  }),\n  // Upload endpoints\n  uploadFile: file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/api/upload/', formData);\n  },\n  getSupportedFormats: () => api.get('/api/upload/formats'),\n  // Single transaction delete\n  deleteTransaction: id => api.delete(`/api/transactions/${id}`)\n};\nexport const authAPI = {\n  signup: ({\n    email,\n    password\n  }) => api.post('/api/auth/signup', {\n    email,\n    password\n  }),\n  login: async ({\n    email,\n    password\n  }) => {\n    const body = new URLSearchParams();\n    body.append('username', email);\n    body.append('password', password);\n    // OAuth2PasswordRequestForm requires x-www-form-urlencoded\n    const res = await api.post('/api/auth/login', body, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    return res;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","expenseAPI","getTransactions","params","get","createTransaction","txn","post","saveTransactions","transactions","items","filterTransactions","filters","deleteAllTransactions","delete","getWeeklyAnalytics","weeks","getMonthlyAnalytics","months","getCategoryAnalytics","days","period_days","getCategoriesByMonth","mm","year","undefined","getSpendingSummary","getCalendarData","month","getByMonth","uploadFile","file","formData","FormData","append","getSupportedFormats","deleteTransaction","id","authAPI","signup","email","password","login","body","URLSearchParams","res"],"sources":["/Users/manojvirinchichitta/ExpenseTracker/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use relative base URL so CRA proxy forwards to backend (see package.json \"proxy\")\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\n// Do NOT set a global Content-Type, so FormData uploads can set proper boundaries\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Attach Authorization header if token exists\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const expenseAPI = {\n  // Transaction endpoints\n  getTransactions: (params = {}) => api.get('/api/transactions/', { params }),\n  createTransaction: (txn) => api.post('/api/transactions/', txn, { headers: { 'Content-Type': 'application/json' } }),\n  saveTransactions: (transactions) => api.post('/api/transactions/batch', { items: transactions }, {\n    headers: { 'Content-Type': 'application/json' }\n  }),\n  filterTransactions: (filters) => api.get('/api/transactions/filter', { params: filters }),\n  deleteAllTransactions: () => api.delete('/api/transactions/'),\n  \n  // Analytics endpoints\n  getWeeklyAnalytics: (weeks = 4) => api.get('/api/transactions/analytics/weekly', { params: { weeks } }),\n  getMonthlyAnalytics: (months = 12) => api.get('/api/transactions/analytics/monthly', { params: { months } }),\n  getCategoryAnalytics: (days = 30) => api.get('/api/transactions/analytics/categories', { params: { period_days: days } }),\n  getCategoriesByMonth: (mm, year = undefined) => api.get('/api/transactions/analytics/categories-by-month', { params: { mm, year } }),\n  getSpendingSummary: (days = 30) => api.get('/api/transactions/analytics/summary', { params: { period_days: days } }),\n  getCalendarData: (year, month) => api.get('/api/transactions/analytics/calendar', { params: { year, month } }),\n  getByMonth: (mm, year = undefined) => api.get('/api/transactions/analytics/by-month', { params: { mm, year } }),\n  \n  // Upload endpoints\n  uploadFile: (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/api/upload/', formData);\n  },\n  getSupportedFormats: () => api.get('/api/upload/formats'),\n  // Single transaction delete\n  deleteTransaction: (id) => api.delete(`/api/transactions/${id}`),\n};\n\nexport const authAPI = {\n  signup: ({ email, password }) => api.post('/api/auth/signup', { email, password }),\n  login: async ({ email, password }) => {\n    const body = new URLSearchParams();\n    body.append('username', email);\n    body.append('password', password);\n    // OAuth2PasswordRequestForm requires x-www-form-urlencoded\n    const res = await api.post('/api/auth/login', body, {\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n    });\n    return res;\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}