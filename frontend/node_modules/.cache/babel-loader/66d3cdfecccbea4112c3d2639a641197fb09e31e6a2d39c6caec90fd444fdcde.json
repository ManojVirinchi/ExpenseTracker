{"ast":null,"code":"import axios from 'axios';\n\n// Use relative base URL so CRA proxy forwards to backend (see package.json \"proxy\")\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const expenseAPI = {\n  // Transaction endpoints\n  getTransactions: (params = {}) => api.get('/api/transactions/', {\n    params\n  }),\n  saveTransactions: transactions => api.post('/api/transactions/batch', {\n    items: transactions\n  }),\n  filterTransactions: filters => api.get('/api/transactions/filter', {\n    params: filters\n  }),\n  // Analytics endpoints\n  getWeeklyAnalytics: (weeks = 4) => api.get('/api/transactions/analytics/weekly', {\n    params: {\n      weeks\n    }\n  }),\n  getMonthlyAnalytics: (months = 12) => api.get('/api/transactions/analytics/monthly', {\n    params: {\n      months\n    }\n  }),\n  getCategoryAnalytics: (days = 30) => api.get('/api/transactions/analytics/categories', {\n    params: {\n      period_days: days\n    }\n  }),\n  getSpendingSummary: (days = 30) => api.get('/api/transactions/analytics/summary', {\n    params: {\n      period_days: days\n    }\n  }),\n  getCalendarData: (year, month) => api.get('/api/transactions/analytics/calendar', {\n    params: {\n      year,\n      month\n    }\n  }),\n  // Upload endpoints\n  uploadFile: file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/api/upload/', formData, {\n      headers: {\n        // Don't set Content-Type for FormData - let browser set it with boundary\n      }\n    });\n  },\n  getSupportedFormats: () => api.get('/api/upload/formats')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","expenseAPI","getTransactions","params","get","saveTransactions","transactions","post","items","filterTransactions","filters","getWeeklyAnalytics","weeks","getMonthlyAnalytics","months","getCategoryAnalytics","days","period_days","getSpendingSummary","getCalendarData","year","month","uploadFile","file","formData","FormData","append","getSupportedFormats"],"sources":["/Users/manojvirinchichitta/ExpenseTracker/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use relative base URL so CRA proxy forwards to backend (see package.json \"proxy\")\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const expenseAPI = {\n  // Transaction endpoints\n  getTransactions: (params = {}) => api.get('/api/transactions/', { params }),\n  saveTransactions: (transactions) => api.post('/api/transactions/batch', { items: transactions }),\n  filterTransactions: (filters) => api.get('/api/transactions/filter', { params: filters }),\n  \n  // Analytics endpoints\n  getWeeklyAnalytics: (weeks = 4) => api.get('/api/transactions/analytics/weekly', { params: { weeks } }),\n  getMonthlyAnalytics: (months = 12) => api.get('/api/transactions/analytics/monthly', { params: { months } }),\n  getCategoryAnalytics: (days = 30) => api.get('/api/transactions/analytics/categories', { params: { period_days: days } }),\n  getSpendingSummary: (days = 30) => api.get('/api/transactions/analytics/summary', { params: { period_days: days } }),\n  getCalendarData: (year, month) => api.get('/api/transactions/analytics/calendar', { params: { year, month } }),\n  \n  // Upload endpoints\n  uploadFile: (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/api/upload/', formData, {\n      headers: {\n        // Don't set Content-Type for FormData - let browser set it with boundary\n      }\n    });\n  },\n  getSupportedFormats: () => api.get('/api/upload/formats'),\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;AAExD,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAG;EACxB;EACAC,eAAe,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAKN,GAAG,CAACO,GAAG,CAAC,oBAAoB,EAAE;IAAED;EAAO,CAAC,CAAC;EAC3EE,gBAAgB,EAAGC,YAAY,IAAKT,GAAG,CAACU,IAAI,CAAC,yBAAyB,EAAE;IAAEC,KAAK,EAAEF;EAAa,CAAC,CAAC;EAChGG,kBAAkB,EAAGC,OAAO,IAAKb,GAAG,CAACO,GAAG,CAAC,0BAA0B,EAAE;IAAED,MAAM,EAAEO;EAAQ,CAAC,CAAC;EAEzF;EACAC,kBAAkB,EAAEA,CAACC,KAAK,GAAG,CAAC,KAAKf,GAAG,CAACO,GAAG,CAAC,oCAAoC,EAAE;IAAED,MAAM,EAAE;MAAES;IAAM;EAAE,CAAC,CAAC;EACvGC,mBAAmB,EAAEA,CAACC,MAAM,GAAG,EAAE,KAAKjB,GAAG,CAACO,GAAG,CAAC,qCAAqC,EAAE;IAAED,MAAM,EAAE;MAAEW;IAAO;EAAE,CAAC,CAAC;EAC5GC,oBAAoB,EAAEA,CAACC,IAAI,GAAG,EAAE,KAAKnB,GAAG,CAACO,GAAG,CAAC,wCAAwC,EAAE;IAAED,MAAM,EAAE;MAAEc,WAAW,EAAED;IAAK;EAAE,CAAC,CAAC;EACzHE,kBAAkB,EAAEA,CAACF,IAAI,GAAG,EAAE,KAAKnB,GAAG,CAACO,GAAG,CAAC,qCAAqC,EAAE;IAAED,MAAM,EAAE;MAAEc,WAAW,EAAED;IAAK;EAAE,CAAC,CAAC;EACpHG,eAAe,EAAEA,CAACC,IAAI,EAAEC,KAAK,KAAKxB,GAAG,CAACO,GAAG,CAAC,sCAAsC,EAAE;IAAED,MAAM,EAAE;MAAEiB,IAAI;MAAEC;IAAM;EAAE,CAAC,CAAC;EAE9G;EACAC,UAAU,EAAGC,IAAI,IAAK;IACpB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,OAAO1B,GAAG,CAACU,IAAI,CAAC,cAAc,EAAEiB,QAAQ,EAAE;MACxCxB,OAAO,EAAE;QACP;MAAA;IAEJ,CAAC,CAAC;EACJ,CAAC;EACD2B,mBAAmB,EAAEA,CAAA,KAAM9B,GAAG,CAACO,GAAG,CAAC,qBAAqB;AAC1D,CAAC;AAED,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}