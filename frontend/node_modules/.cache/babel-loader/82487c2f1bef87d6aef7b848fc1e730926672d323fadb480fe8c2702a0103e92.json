{"ast":null,"code":"var _jsxFileName = \"/Users/manojvirinchichitta/ExpenseTracker/frontend/src/context/ExpenseContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useMemo, useCallback } from 'react';\nimport { expenseAPI } from '../services/api';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseContext = /*#__PURE__*/createContext();\nconst initialState = {\n  transactions: [],\n  uploads: [],\n  // [{ name, status, error? }]\n  analytics: {\n    weekly: null,\n    monthly: null,\n    categories: null,\n    calendar: null,\n    summary: null\n  },\n  loading: false,\n  error: null,\n  selectedTransactions: [],\n  committedTransactions: [],\n  currentMonth: new Date().getMonth() + 1,\n  currentYear: new Date().getFullYear()\n};\nfunction expenseReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload,\n        loading: false\n      };\n    case 'ADD_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: [...state.transactions, ...action.payload]\n      };\n    case 'SET_ANALYTICS':\n      return {\n        ...state,\n        analytics: {\n          ...state.analytics,\n          ...action.payload\n        }\n      };\n    case 'ADD_UPLOAD_ITEMS':\n      return {\n        ...state,\n        uploads: [...state.uploads, ...action.payload]\n      };\n    case 'UPDATE_UPLOAD_ITEM':\n      {\n        const {\n          index,\n          updates\n        } = action.payload;\n        return {\n          ...state,\n          uploads: state.uploads.map((u, i) => i === index ? {\n            ...u,\n            ...updates\n          } : u)\n        };\n      }\n    case 'CLEAR_UPLOADS':\n      return {\n        ...state,\n        uploads: []\n      };\n    case 'SET_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        selectedTransactions: action.payload\n      };\n    case 'TOGGLE_SELECTED_TRANSACTION':\n      {\n        const getKey = x => {\n          var _x$id;\n          return x && ((_x$id = x.id) !== null && _x$id !== void 0 ? _x$id : `${x.date}|${x.description}|${x.amount}`);\n        };\n        const targetKey = getKey(action.payload);\n        const exists = state.selectedTransactions.find(t => getKey(t) === targetKey);\n        const next = exists ? state.selectedTransactions.filter(t => getKey(t) !== targetKey) : [...state.selectedTransactions, action.payload];\n        return {\n          ...state,\n          selectedTransactions: next\n        };\n      }\n    case 'CLEAR_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        selectedTransactions: []\n      };\n    case 'COMMIT_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        committedTransactions: action.payload,\n        selectedTransactions: []\n      };\n    case 'SET_CALENDAR_MONTH':\n      return {\n        ...state,\n        currentMonth: action.payload.month,\n        currentYear: action.payload.year\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n}\nexport function ExpenseProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n  const {\n    isAuthenticated\n  } = useAuth();\n\n  // Do not auto-load from DB on login; session starts empty until user uploads\n  const AUTO_LOAD_ON_LOGIN = false;\n  const loadTransactions = async () => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await expenseAPI.getTransactions();\n      dispatch({\n        type: 'SET_TRANSACTIONS',\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const loadAnalytics = async () => {\n    try {\n      const [weekly, monthly, categories, summary] = await Promise.all([expenseAPI.getWeeklyAnalytics(), expenseAPI.getMonthlyAnalytics(), expenseAPI.getCategoryAnalytics(), expenseAPI.getSpendingSummary()]);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          weekly: weekly.data,\n          monthly: monthly.data,\n          categories: categories.data,\n          summary: summary.data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const loadCalendarData = async (year, month) => {\n    try {\n      const response = await expenseAPI.getCalendarData(year, month);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          calendar: response.data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const saveTransactions = async transactions => {\n    try {\n      const response = await expenseAPI.saveTransactions(transactions);\n      dispatch({\n        type: 'ADD_TRANSACTIONS',\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const clearAllTransactions = async () => {\n    try {\n      await expenseAPI.deleteAllTransactions();\n      dispatch({\n        type: 'SET_TRANSACTIONS',\n        payload: []\n      });\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      dispatch({\n        type: 'COMMIT_SELECTED_TRANSACTIONS',\n        payload: []\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const uploadFile = async file => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await expenseAPI.uploadFile(file);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const toggleMyItem = useCallback(transaction => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n    dispatch({\n      type: 'TOGGLE_SELECTED_TRANSACTION',\n      payload: transaction\n    });\n  }, []);\n  const clearMyItems = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_SELECTED_TRANSACTIONS'\n    });\n  }, []);\n  const commitMyItems = useCallback(async () => {\n    // Persist ALL selected items, then refresh from DB\n    const itemsToSave = state.selectedTransactions;\n    if (itemsToSave.length === 0) {\n      dispatch({\n        type: 'COMMIT_SELECTED_TRANSACTIONS',\n        payload: []\n      });\n      return;\n    }\n    try {\n      await expenseAPI.saveTransactions(itemsToSave);\n      // Mark committed in local state for display\n      dispatch({\n        type: 'COMMIT_SELECTED_TRANSACTIONS',\n        payload: itemsToSave\n      });\n      // Optionally refresh analytics only; do not repopulate transactions list\n      await loadAnalytics();\n      // Clear selections after successful save\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n    } catch (e) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: (e === null || e === void 0 ? void 0 : e.message) || 'Failed to save selected items'\n      });\n      throw e;\n    }\n  }, [state.selectedTransactions]);\n  const myItemsThisMonthTotal = useMemo(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n    return state.committedTransactions.filter(t => {\n      if (!t.date) return false;\n      // Expecting YYYY-MM-DD\n      const [y, m] = String(t.date).split('-').map(v => parseInt(v, 10));\n      return y === year && m === month;\n    }).reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  }, [state.committedTransactions]);\n  useEffect(() => {\n    if (isAuthenticated && AUTO_LOAD_ON_LOGIN) {\n      loadTransactions();\n      loadAnalytics();\n    }\n  }, [isAuthenticated]);\n\n  // Always clear in-memory session data on logout\n  useEffect(() => {\n    if (!isAuthenticated) {\n      dispatch({\n        type: 'SET_TRANSACTIONS',\n        payload: []\n      });\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      dispatch({\n        type: 'COMMIT_SELECTED_TRANSACTIONS',\n        payload: []\n      });\n      dispatch({\n        type: 'CLEAR_UPLOADS'\n      });\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          weekly: null,\n          monthly: null,\n          categories: null,\n          calendar: null,\n          summary: null\n        }\n      });\n      dispatch({\n        type: 'SET_ERROR',\n        payload: null\n      });\n    }\n  }, [isAuthenticated]);\n\n  // Clear selections when the month changes and set current period marker\n  useEffect(() => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n  }, []);\n  const value = {\n    ...state,\n    loadTransactions,\n    loadAnalytics,\n    loadCalendarData,\n    saveTransactions,\n    uploadFile,\n    dispatch,\n    // upload status helpers\n    addUploadItems: items => dispatch({\n      type: 'ADD_UPLOAD_ITEMS',\n      payload: items\n    }),\n    updateUploadItem: (index, updates) => dispatch({\n      type: 'UPDATE_UPLOAD_ITEM',\n      payload: {\n        index,\n        updates\n      }\n    }),\n    toggleMyItem,\n    clearMyItems,\n    commitMyItems,\n    myItemsThisMonthTotal,\n    clearAllTransactions\n  };\n  return /*#__PURE__*/_jsxDEV(ExpenseContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseProvider, \"VUlMVzNWP0FcA1TucLbOR3qbBf8=\", false, function () {\n  return [useAuth];\n});\n_c = ExpenseProvider;\nexport function useExpense() {\n  _s2();\n  const context = useContext(ExpenseContext);\n  if (!context) {\n    throw new Error('useExpense must be used within an ExpenseProvider');\n  }\n  return context;\n}\n_s2(useExpense, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ExpenseProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useMemo","useCallback","expenseAPI","useAuth","jsxDEV","_jsxDEV","ExpenseContext","initialState","transactions","uploads","analytics","weekly","monthly","categories","calendar","summary","loading","error","selectedTransactions","committedTransactions","currentMonth","Date","getMonth","currentYear","getFullYear","expenseReducer","state","action","type","payload","index","updates","map","u","i","getKey","x","_x$id","id","date","description","amount","targetKey","exists","find","t","next","filter","month","year","ExpenseProvider","children","_s","dispatch","isAuthenticated","AUTO_LOAD_ON_LOGIN","loadTransactions","response","getTransactions","data","message","loadAnalytics","Promise","all","getWeeklyAnalytics","getMonthlyAnalytics","getCategoryAnalytics","getSpendingSummary","loadCalendarData","getCalendarData","saveTransactions","clearAllTransactions","deleteAllTransactions","uploadFile","file","toggleMyItem","transaction","now","period","String","padStart","stored","localStorage","getItem","setItem","clearMyItems","commitMyItems","itemsToSave","length","e","myItemsThisMonthTotal","y","m","split","v","parseInt","reduce","sum","Number","value","addUploadItems","items","updateUploadItem","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useExpense","_s2","context","Error","$RefreshReg$"],"sources":["/Users/manojvirinchichitta/ExpenseTracker/frontend/src/context/ExpenseContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useMemo, useCallback } from 'react';\nimport { expenseAPI } from '../services/api';\nimport { useAuth } from '../context/AuthContext';\n\nconst ExpenseContext = createContext();\n\nconst initialState = {\n  transactions: [],\n  uploads: [], // [{ name, status, error? }]\n  analytics: {\n    weekly: null,\n    monthly: null,\n    categories: null,\n    calendar: null,\n    summary: null\n  },\n  loading: false,\n  error: null,\n  selectedTransactions: [],\n  committedTransactions: [],\n  currentMonth: new Date().getMonth() + 1,\n  currentYear: new Date().getFullYear()\n};\n\nfunction expenseReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload, loading: false };\n    case 'SET_TRANSACTIONS':\n      return { ...state, transactions: action.payload, loading: false };\n    case 'ADD_TRANSACTIONS':\n      return { ...state, transactions: [...state.transactions, ...action.payload] };\n    case 'SET_ANALYTICS':\n      return { ...state, analytics: { ...state.analytics, ...action.payload } };\n    case 'ADD_UPLOAD_ITEMS':\n      return { ...state, uploads: [...state.uploads, ...action.payload] };\n    case 'UPDATE_UPLOAD_ITEM': {\n      const { index, updates } = action.payload;\n      return {\n        ...state,\n        uploads: state.uploads.map((u, i) => (i === index ? { ...u, ...updates } : u))\n      };\n    }\n    case 'CLEAR_UPLOADS':\n      return { ...state, uploads: [] };\n    case 'SET_SELECTED_TRANSACTIONS':\n      return { ...state, selectedTransactions: action.payload };\n    case 'TOGGLE_SELECTED_TRANSACTION': {\n      const getKey = (x) => (x && (x.id ?? `${x.date}|${x.description}|${x.amount}`));\n      const targetKey = getKey(action.payload);\n      const exists = state.selectedTransactions.find((t) => getKey(t) === targetKey);\n      const next = exists\n        ? state.selectedTransactions.filter((t) => getKey(t) !== targetKey)\n        : [...state.selectedTransactions, action.payload];\n      return { ...state, selectedTransactions: next };\n    }\n    case 'CLEAR_SELECTED_TRANSACTIONS':\n      return { ...state, selectedTransactions: [] };\n    case 'COMMIT_SELECTED_TRANSACTIONS':\n      return { ...state, committedTransactions: action.payload, selectedTransactions: [] };\n    case 'SET_CALENDAR_MONTH':\n      return { ...state, currentMonth: action.payload.month, currentYear: action.payload.year };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n}\n\nexport function ExpenseProvider({ children }) {\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n  const { isAuthenticated } = useAuth();\n\n  // Do not auto-load from DB on login; session starts empty until user uploads\n  const AUTO_LOAD_ON_LOGIN = false;\n\n  const loadTransactions = async () => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const response = await expenseAPI.getTransactions();\n      dispatch({ type: 'SET_TRANSACTIONS', payload: response.data });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const loadAnalytics = async () => {\n    try {\n      const [weekly, monthly, categories, summary] = await Promise.all([\n        expenseAPI.getWeeklyAnalytics(),\n        expenseAPI.getMonthlyAnalytics(),\n        expenseAPI.getCategoryAnalytics(),\n        expenseAPI.getSpendingSummary()\n      ]);\n      \n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          weekly: weekly.data,\n          monthly: monthly.data,\n          categories: categories.data,\n          summary: summary.data\n        }\n      });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const loadCalendarData = async (year, month) => {\n    try {\n      const response = await expenseAPI.getCalendarData(year, month);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: { calendar: response.data }\n      });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const saveTransactions = async (transactions) => {\n    try {\n      const response = await expenseAPI.saveTransactions(transactions);\n      dispatch({ type: 'ADD_TRANSACTIONS', payload: response.data });\n      return response.data;\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const clearAllTransactions = async () => {\n    try {\n      await expenseAPI.deleteAllTransactions();\n      dispatch({ type: 'SET_TRANSACTIONS', payload: [] });\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      dispatch({ type: 'COMMIT_SELECTED_TRANSACTIONS', payload: [] });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const uploadFile = async (file) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const response = await expenseAPI.uploadFile(file);\n      dispatch({ type: 'SET_LOADING', payload: false });\n      return response.data;\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const toggleMyItem = useCallback((transaction) => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n    dispatch({ type: 'TOGGLE_SELECTED_TRANSACTION', payload: transaction });\n  }, []);\n\n  const clearMyItems = useCallback(() => {\n    dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n  }, []);\n\n  const commitMyItems = useCallback(async () => {\n    // Persist ALL selected items, then refresh from DB\n    const itemsToSave = state.selectedTransactions;\n\n    if (itemsToSave.length === 0) {\n      dispatch({ type: 'COMMIT_SELECTED_TRANSACTIONS', payload: [] });\n      return;\n    }\n\n    try {\n      await expenseAPI.saveTransactions(itemsToSave);\n      // Mark committed in local state for display\n      dispatch({ type: 'COMMIT_SELECTED_TRANSACTIONS', payload: itemsToSave });\n      // Optionally refresh analytics only; do not repopulate transactions list\n      await loadAnalytics();\n      // Clear selections after successful save\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n    } catch (e) {\n      dispatch({ type: 'SET_ERROR', payload: e?.message || 'Failed to save selected items' });\n      throw e;\n    }\n  }, [state.selectedTransactions]);\n\n  const myItemsThisMonthTotal = useMemo(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n    return state.committedTransactions\n      .filter((t) => {\n        if (!t.date) return false;\n        // Expecting YYYY-MM-DD\n        const [y, m] = String(t.date).split('-').map((v) => parseInt(v, 10));\n        return y === year && m === month;\n      })\n      .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  }, [state.committedTransactions]);\n\n  useEffect(() => {\n    if (isAuthenticated && AUTO_LOAD_ON_LOGIN) {\n      loadTransactions();\n      loadAnalytics();\n    }\n  }, [isAuthenticated]);\n\n  // Always clear in-memory session data on logout\n  useEffect(() => {\n    if (!isAuthenticated) {\n      dispatch({ type: 'SET_TRANSACTIONS', payload: [] });\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      dispatch({ type: 'COMMIT_SELECTED_TRANSACTIONS', payload: [] });\n      dispatch({ type: 'CLEAR_UPLOADS' });\n      dispatch({ type: 'SET_ANALYTICS', payload: { weekly: null, monthly: null, categories: null, calendar: null, summary: null } });\n      dispatch({ type: 'SET_ERROR', payload: null });\n    }\n  }, [isAuthenticated]);\n\n  // Clear selections when the month changes and set current period marker\n  useEffect(() => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n  }, []);\n\n  const value = {\n    ...state,\n    loadTransactions,\n    loadAnalytics,\n    loadCalendarData,\n    saveTransactions,\n    uploadFile,\n    dispatch,\n    // upload status helpers\n    addUploadItems: (items) => dispatch({ type: 'ADD_UPLOAD_ITEMS', payload: items }),\n    updateUploadItem: (index, updates) => dispatch({ type: 'UPDATE_UPLOAD_ITEM', payload: { index, updates } }),\n    toggleMyItem,\n    clearMyItems,\n    commitMyItems,\n    myItemsThisMonthTotal,\n    clearAllTransactions\n  };\n\n  return (\n    <ExpenseContext.Provider value={value}>\n      {children}\n    </ExpenseContext.Provider>\n  );\n}\n\nexport function useExpense() {\n  const context = useContext(ExpenseContext);\n  if (!context) {\n    throw new Error('useExpense must be used within an ExpenseProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}