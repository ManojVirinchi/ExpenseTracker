{"ast":null,"code":"var _jsxFileName = \"/Users/manojvirinchichitta/ExpenseTracker/frontend/src/pages/Upload.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useExpense } from '../context/ExpenseContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Upload = () => {\n  _s();\n  const {\n    uploadFile,\n    saveTransactions\n  } = useExpense();\n  const onChange = async e => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n    try {\n      const uploadedResults = [];\n      for (const file of files) {\n        const data = await uploadFile(file);\n        uploadedResults.push(data);\n      }\n\n      // If backend returns transactions to persist, optionally save them\n      const extracted = uploadedResults.flatMap(r => Array.isArray(r === null || r === void 0 ? void 0 : r.transactions) ? r.transactions : []);\n      if (extracted.length > 0) {\n        await saveTransactions(extracted);\n      }\n    } finally {\n      e.target.value = '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold text-gray-900\",\n      children: \"Upload Receipts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-gray-700\",\n      children: \"Upload receipt images or PDFs to extract transactions.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*,application/pdf\",\n        multiple: true,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Upload, \"/FhMztgFMGyj0qLI2dPwjo5zTjw=\", false, function () {\n  return [useExpense];\n});\n_c = Upload;\nexport default Upload;\nvar _c;\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"names":["React","useExpense","jsxDEV","_jsxDEV","Upload","_s","uploadFile","saveTransactions","onChange","e","files","target","length","uploadedResults","file","data","push","extracted","flatMap","r","Array","isArray","transactions","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","multiple","_c","$RefreshReg$"],"sources":["/Users/manojvirinchichitta/ExpenseTracker/frontend/src/pages/Upload.js"],"sourcesContent":["import React from 'react';\nimport { useExpense } from '../context/ExpenseContext';\n\nconst Upload = () => {\n  const { uploadFile, saveTransactions } = useExpense();\n\n  const onChange = async (e) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n\n    try {\n      const uploadedResults = [];\n      for (const file of files) {\n        const data = await uploadFile(file);\n        uploadedResults.push(data);\n      }\n\n      // If backend returns transactions to persist, optionally save them\n      const extracted = uploadedResults\n        .flatMap(r => (Array.isArray(r?.transactions) ? r.transactions : []));\n      if (extracted.length > 0) {\n        await saveTransactions(extracted);\n      }\n    } finally {\n      e.target.value = '';\n    }\n  };\n\n  return (\n    <div>\n      <h2 className=\"text-2xl font-semibold text-gray-900\">Upload Receipts</h2>\n      <p className=\"mt-2 text-gray-700\">Upload receipt images or PDFs to extract transactions.</p>\n      <div className=\"mt-4\">\n        <input type=\"file\" accept=\"image/*,application/pdf\" multiple onChange={onChange} />\n      </div>\n    </div>\n  );\n};\n\nexport default Upload;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC,UAAU;IAAEC;EAAiB,CAAC,GAAGN,UAAU,CAAC,CAAC;EAErD,MAAMO,QAAQ,GAAG,MAAOC,CAAC,IAAK;IAC5B,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5B,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;IAElC,IAAI;MACF,MAAMC,eAAe,GAAG,EAAE;MAC1B,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;QACxB,MAAMK,IAAI,GAAG,MAAMT,UAAU,CAACQ,IAAI,CAAC;QACnCD,eAAe,CAACG,IAAI,CAACD,IAAI,CAAC;MAC5B;;MAEA;MACA,MAAME,SAAS,GAAGJ,eAAe,CAC9BK,OAAO,CAACC,CAAC,IAAKC,KAAK,CAACC,OAAO,CAACF,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEG,YAAY,CAAC,GAAGH,CAAC,CAACG,YAAY,GAAG,EAAG,CAAC;MACvE,IAAIL,SAAS,CAACL,MAAM,GAAG,CAAC,EAAE;QACxB,MAAML,gBAAgB,CAACU,SAAS,CAAC;MACnC;IACF,CAAC,SAAS;MACRR,CAAC,CAACE,MAAM,CAACY,KAAK,GAAG,EAAE;IACrB;EACF,CAAC;EAED,oBACEpB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAIsB,SAAS,EAAC,sCAAsC;MAAAD,QAAA,EAAC;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzE1B,OAAA;MAAGsB,SAAS,EAAC,oBAAoB;MAAAD,QAAA,EAAC;IAAsD;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC5F1B,OAAA;MAAKsB,SAAS,EAAC,MAAM;MAAAD,QAAA,eACnBrB,OAAA;QAAO2B,IAAI,EAAC,MAAM;QAACC,MAAM,EAAC,yBAAyB;QAACC,QAAQ;QAACxB,QAAQ,EAAEA;MAAS;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxB,EAAA,CAlCID,MAAM;EAAA,QAC+BH,UAAU;AAAA;AAAAgC,EAAA,GAD/C7B,MAAM;AAoCZ,eAAeA,MAAM;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}