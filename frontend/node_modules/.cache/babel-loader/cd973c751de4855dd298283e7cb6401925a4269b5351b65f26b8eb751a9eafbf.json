{"ast":null,"code":"var _jsxFileName = \"/Users/manojvirinchichitta/ExpenseTracker/frontend/src/context/ExpenseContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useMemo, useCallback } from 'react';\nimport { expenseAPI } from '../services/api';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseContext = /*#__PURE__*/createContext();\nconst initialState = {\n  transactions: [],\n  analytics: {\n    weekly: null,\n    monthly: null,\n    categories: null,\n    calendar: null,\n    summary: null\n  },\n  loading: false,\n  error: null,\n  selectedTransactions: [],\n  committedTransactions: [],\n  currentMonth: new Date().getMonth() + 1,\n  currentYear: new Date().getFullYear()\n};\nfunction expenseReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload,\n        loading: false\n      };\n    case 'ADD_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: [...state.transactions, ...action.payload]\n      };\n    case 'SET_ANALYTICS':\n      return {\n        ...state,\n        analytics: {\n          ...state.analytics,\n          ...action.payload\n        }\n      };\n    case 'SET_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        selectedTransactions: action.payload\n      };\n    case 'TOGGLE_SELECTED_TRANSACTION':\n      {\n        const getKey = x => {\n          var _x$id;\n          return x && ((_x$id = x.id) !== null && _x$id !== void 0 ? _x$id : `${x.date}|${x.description}|${x.amount}`);\n        };\n        const targetKey = getKey(action.payload);\n        const exists = state.selectedTransactions.find(t => getKey(t) === targetKey);\n        const next = exists ? state.selectedTransactions.filter(t => getKey(t) !== targetKey) : [...state.selectedTransactions, action.payload];\n        return {\n          ...state,\n          selectedTransactions: next\n        };\n      }\n    case 'CLEAR_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        selectedTransactions: []\n      };\n    case 'COMMIT_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        committedTransactions: action.payload,\n        selectedTransactions: []\n      };\n    case 'SET_CALENDAR_MONTH':\n      return {\n        ...state,\n        currentMonth: action.payload.month,\n        currentYear: action.payload.year\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n}\nexport function ExpenseProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n  const {\n    isAuthenticated\n  } = useAuth();\n\n  // Do not auto-load from DB on login; session starts empty until user uploads\n  const AUTO_LOAD_ON_LOGIN = false;\n  const loadTransactions = async () => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await expenseAPI.getTransactions();\n      dispatch({\n        type: 'SET_TRANSACTIONS',\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const loadAnalytics = async () => {\n    try {\n      const [weekly, monthly, categories, summary] = await Promise.all([expenseAPI.getWeeklyAnalytics(), expenseAPI.getMonthlyAnalytics(), expenseAPI.getCategoryAnalytics(), expenseAPI.getSpendingSummary()]);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          weekly: weekly.data,\n          monthly: monthly.data,\n          categories: categories.data,\n          summary: summary.data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const loadCalendarData = async (year, month) => {\n    try {\n      const response = await expenseAPI.getCalendarData(year, month);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          calendar: response.data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const saveTransactions = async transactions => {\n    try {\n      const response = await expenseAPI.saveTransactions(transactions);\n      dispatch({\n        type: 'ADD_TRANSACTIONS',\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const clearAllTransactions = async () => {\n    try {\n      await expenseAPI.deleteAllTransactions();\n      dispatch({\n        type: 'SET_TRANSACTIONS',\n        payload: []\n      });\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      dispatch({\n        type: 'COMMIT_SELECTED_TRANSACTIONS',\n        payload: []\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const uploadFile = async file => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await expenseAPI.uploadFile(file);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const toggleMyItem = useCallback(transaction => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n    dispatch({\n      type: 'TOGGLE_SELECTED_TRANSACTION',\n      payload: transaction\n    });\n  }, []);\n  const clearMyItems = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_SELECTED_TRANSACTIONS'\n    });\n  }, []);\n  const commitMyItems = useCallback(async () => {\n    // Persist ALL selected items, then refresh from DB\n    const itemsToSave = state.selectedTransactions;\n    if (itemsToSave.length === 0) {\n      dispatch({\n        type: 'COMMIT_SELECTED_TRANSACTIONS',\n        payload: []\n      });\n      return;\n    }\n    try {\n      await expenseAPI.saveTransactions(itemsToSave);\n      // Mark committed in local state for display\n      dispatch({\n        type: 'COMMIT_SELECTED_TRANSACTIONS',\n        payload: itemsToSave\n      });\n      // Refresh DB-backed views\n      await Promise.all([loadTransactions(), loadAnalytics()]);\n      // Clear selections after successful save\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n    } catch (e) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: (e === null || e === void 0 ? void 0 : e.message) || 'Failed to save selected items'\n      });\n      throw e;\n    }\n  }, [state.selectedTransactions]);\n  const myItemsThisMonthTotal = useMemo(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n    return state.committedTransactions.filter(t => {\n      if (!t.date) return false;\n      // Expecting YYYY-MM-DD\n      const [y, m] = String(t.date).split('-').map(v => parseInt(v, 10));\n      return y === year && m === month;\n    }).reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  }, [state.committedTransactions]);\n  useEffect(() => {\n    if (isAuthenticated && AUTO_LOAD_ON_LOGIN) {\n      loadTransactions();\n      loadAnalytics();\n    }\n  }, [isAuthenticated]);\n\n  // Clear selections when the month changes and set current period marker\n  useEffect(() => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n  }, []);\n  const value = {\n    ...state,\n    loadTransactions,\n    loadAnalytics,\n    loadCalendarData,\n    saveTransactions,\n    uploadFile,\n    dispatch,\n    toggleMyItem,\n    clearMyItems,\n    commitMyItems,\n    myItemsThisMonthTotal,\n    clearAllTransactions\n  };\n  return /*#__PURE__*/_jsxDEV(ExpenseContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseProvider, \"jzzyKKW3aZ2WLw6m3e1LCLk+wss=\", false, function () {\n  return [useAuth];\n});\n_c = ExpenseProvider;\nexport function useExpense() {\n  _s2();\n  const context = useContext(ExpenseContext);\n  if (!context) {\n    throw new Error('useExpense must be used within an ExpenseProvider');\n  }\n  return context;\n}\n_s2(useExpense, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ExpenseProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useMemo","useCallback","expenseAPI","useAuth","jsxDEV","_jsxDEV","ExpenseContext","initialState","transactions","analytics","weekly","monthly","categories","calendar","summary","loading","error","selectedTransactions","committedTransactions","currentMonth","Date","getMonth","currentYear","getFullYear","expenseReducer","state","action","type","payload","getKey","x","_x$id","id","date","description","amount","targetKey","exists","find","t","next","filter","month","year","ExpenseProvider","children","_s","dispatch","isAuthenticated","AUTO_LOAD_ON_LOGIN","loadTransactions","response","getTransactions","data","message","loadAnalytics","Promise","all","getWeeklyAnalytics","getMonthlyAnalytics","getCategoryAnalytics","getSpendingSummary","loadCalendarData","getCalendarData","saveTransactions","clearAllTransactions","deleteAllTransactions","uploadFile","file","toggleMyItem","transaction","now","period","String","padStart","stored","localStorage","getItem","setItem","clearMyItems","commitMyItems","itemsToSave","length","e","myItemsThisMonthTotal","y","m","split","map","v","parseInt","reduce","sum","Number","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useExpense","_s2","context","Error","$RefreshReg$"],"sources":["/Users/manojvirinchichitta/ExpenseTracker/frontend/src/context/ExpenseContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useMemo, useCallback } from 'react';\nimport { expenseAPI } from '../services/api';\nimport { useAuth } from '../context/AuthContext';\n\nconst ExpenseContext = createContext();\n\nconst initialState = {\n  transactions: [],\n  analytics: {\n    weekly: null,\n    monthly: null,\n    categories: null,\n    calendar: null,\n    summary: null\n  },\n  loading: false,\n  error: null,\n  selectedTransactions: [],\n  committedTransactions: [],\n  currentMonth: new Date().getMonth() + 1,\n  currentYear: new Date().getFullYear()\n};\n\nfunction expenseReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload, loading: false };\n    case 'SET_TRANSACTIONS':\n      return { ...state, transactions: action.payload, loading: false };\n    case 'ADD_TRANSACTIONS':\n      return { ...state, transactions: [...state.transactions, ...action.payload] };\n    case 'SET_ANALYTICS':\n      return { ...state, analytics: { ...state.analytics, ...action.payload } };\n    case 'SET_SELECTED_TRANSACTIONS':\n      return { ...state, selectedTransactions: action.payload };\n    case 'TOGGLE_SELECTED_TRANSACTION': {\n      const getKey = (x) => (x && (x.id ?? `${x.date}|${x.description}|${x.amount}`));\n      const targetKey = getKey(action.payload);\n      const exists = state.selectedTransactions.find((t) => getKey(t) === targetKey);\n      const next = exists\n        ? state.selectedTransactions.filter((t) => getKey(t) !== targetKey)\n        : [...state.selectedTransactions, action.payload];\n      return { ...state, selectedTransactions: next };\n    }\n    case 'CLEAR_SELECTED_TRANSACTIONS':\n      return { ...state, selectedTransactions: [] };\n    case 'COMMIT_SELECTED_TRANSACTIONS':\n      return { ...state, committedTransactions: action.payload, selectedTransactions: [] };\n    case 'SET_CALENDAR_MONTH':\n      return { ...state, currentMonth: action.payload.month, currentYear: action.payload.year };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n}\n\nexport function ExpenseProvider({ children }) {\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n  const { isAuthenticated } = useAuth();\n\n  // Do not auto-load from DB on login; session starts empty until user uploads\n  const AUTO_LOAD_ON_LOGIN = false;\n\n  const loadTransactions = async () => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const response = await expenseAPI.getTransactions();\n      dispatch({ type: 'SET_TRANSACTIONS', payload: response.data });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const loadAnalytics = async () => {\n    try {\n      const [weekly, monthly, categories, summary] = await Promise.all([\n        expenseAPI.getWeeklyAnalytics(),\n        expenseAPI.getMonthlyAnalytics(),\n        expenseAPI.getCategoryAnalytics(),\n        expenseAPI.getSpendingSummary()\n      ]);\n      \n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          weekly: weekly.data,\n          monthly: monthly.data,\n          categories: categories.data,\n          summary: summary.data\n        }\n      });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const loadCalendarData = async (year, month) => {\n    try {\n      const response = await expenseAPI.getCalendarData(year, month);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: { calendar: response.data }\n      });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const saveTransactions = async (transactions) => {\n    try {\n      const response = await expenseAPI.saveTransactions(transactions);\n      dispatch({ type: 'ADD_TRANSACTIONS', payload: response.data });\n      return response.data;\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const clearAllTransactions = async () => {\n    try {\n      await expenseAPI.deleteAllTransactions();\n      dispatch({ type: 'SET_TRANSACTIONS', payload: [] });\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      dispatch({ type: 'COMMIT_SELECTED_TRANSACTIONS', payload: [] });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const uploadFile = async (file) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const response = await expenseAPI.uploadFile(file);\n      dispatch({ type: 'SET_LOADING', payload: false });\n      return response.data;\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const toggleMyItem = useCallback((transaction) => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n    dispatch({ type: 'TOGGLE_SELECTED_TRANSACTION', payload: transaction });\n  }, []);\n\n  const clearMyItems = useCallback(() => {\n    dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n  }, []);\n\n  const commitMyItems = useCallback(async () => {\n    // Persist ALL selected items, then refresh from DB\n    const itemsToSave = state.selectedTransactions;\n\n    if (itemsToSave.length === 0) {\n      dispatch({ type: 'COMMIT_SELECTED_TRANSACTIONS', payload: [] });\n      return;\n    }\n\n    try {\n      await expenseAPI.saveTransactions(itemsToSave);\n      // Mark committed in local state for display\n      dispatch({ type: 'COMMIT_SELECTED_TRANSACTIONS', payload: itemsToSave });\n      // Refresh DB-backed views\n      await Promise.all([loadTransactions(), loadAnalytics()]);\n      // Clear selections after successful save\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n    } catch (e) {\n      dispatch({ type: 'SET_ERROR', payload: e?.message || 'Failed to save selected items' });\n      throw e;\n    }\n  }, [state.selectedTransactions]);\n\n  const myItemsThisMonthTotal = useMemo(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n    return state.committedTransactions\n      .filter((t) => {\n        if (!t.date) return false;\n        // Expecting YYYY-MM-DD\n        const [y, m] = String(t.date).split('-').map((v) => parseInt(v, 10));\n        return y === year && m === month;\n      })\n      .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  }, [state.committedTransactions]);\n\n  useEffect(() => {\n    if (isAuthenticated && AUTO_LOAD_ON_LOGIN) {\n      loadTransactions();\n      loadAnalytics();\n    }\n  }, [isAuthenticated]);\n\n  // Clear selections when the month changes and set current period marker\n  useEffect(() => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n  }, []);\n\n  const value = {\n    ...state,\n    loadTransactions,\n    loadAnalytics,\n    loadCalendarData,\n    saveTransactions,\n    uploadFile,\n    dispatch,\n    toggleMyItem,\n    clearMyItems,\n    commitMyItems,\n    myItemsThisMonthTotal,\n    clearAllTransactions\n  };\n\n  return (\n    <ExpenseContext.Provider value={value}>\n      {children}\n    </ExpenseContext.Provider>\n  );\n}\n\nexport function useExpense() {\n  const context = useContext(ExpenseContext);\n  if (!context) {\n    throw new Error('useExpense must be used within an ExpenseProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}