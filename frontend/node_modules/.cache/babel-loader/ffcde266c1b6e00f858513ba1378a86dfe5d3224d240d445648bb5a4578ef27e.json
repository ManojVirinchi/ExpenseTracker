{"ast":null,"code":"var _jsxFileName = \"/Users/manojvirinchichitta/ExpenseTracker/frontend/src/context/ExpenseContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useMemo, useCallback } from 'react';\nimport { expenseAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseContext = /*#__PURE__*/createContext();\nconst initialState = {\n  transactions: [],\n  analytics: {\n    weekly: null,\n    monthly: null,\n    categories: null,\n    calendar: null,\n    summary: null\n  },\n  loading: false,\n  error: null,\n  selectedTransactions: [],\n  committedTransactions: [],\n  currentMonth: new Date().getMonth() + 1,\n  currentYear: new Date().getFullYear()\n};\nfunction expenseReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload,\n        loading: false\n      };\n    case 'ADD_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: [...state.transactions, ...action.payload]\n      };\n    case 'SET_ANALYTICS':\n      return {\n        ...state,\n        analytics: {\n          ...state.analytics,\n          ...action.payload\n        }\n      };\n    case 'SET_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        selectedTransactions: action.payload\n      };\n    case 'TOGGLE_SELECTED_TRANSACTION':\n      {\n        const exists = state.selectedTransactions.find(t => t.id === action.payload.id);\n        const next = exists ? state.selectedTransactions.filter(t => t.id !== action.payload.id) : [...state.selectedTransactions, action.payload];\n        return {\n          ...state,\n          selectedTransactions: next\n        };\n      }\n    case 'CLEAR_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        selectedTransactions: []\n      };\n    case 'COMMIT_SELECTED_TRANSACTIONS':\n      return {\n        ...state,\n        committedTransactions: action.payload,\n        selectedTransactions: []\n      };\n    case 'SET_CALENDAR_MONTH':\n      return {\n        ...state,\n        currentMonth: action.payload.month,\n        currentYear: action.payload.year\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n}\nexport function ExpenseProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n  const loadTransactions = async () => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await expenseAPI.getTransactions();\n      dispatch({\n        type: 'SET_TRANSACTIONS',\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const loadAnalytics = async () => {\n    try {\n      const [weekly, monthly, categories, summary] = await Promise.all([expenseAPI.getWeeklyAnalytics(), expenseAPI.getMonthlyAnalytics(), expenseAPI.getCategoryAnalytics(), expenseAPI.getSpendingSummary()]);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          weekly: weekly.data,\n          monthly: monthly.data,\n          categories: categories.data,\n          summary: summary.data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const loadCalendarData = async (year, month) => {\n    try {\n      const response = await expenseAPI.getCalendarData(year, month);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          calendar: response.data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const saveTransactions = async transactions => {\n    try {\n      const response = await expenseAPI.saveTransactions(transactions);\n      dispatch({\n        type: 'ADD_TRANSACTIONS',\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const uploadFile = async file => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await expenseAPI.uploadFile(file);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const toggleMyItem = useCallback(transaction => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n    dispatch({\n      type: 'TOGGLE_SELECTED_TRANSACTION',\n      payload: transaction\n    });\n  }, []);\n  const clearMyItems = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_SELECTED_TRANSACTIONS'\n    });\n  }, []);\n  const commitMyItems = useCallback(() => {\n    // Commit only current month selections\n    const now = new Date();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n    const currentMonthSelected = state.selectedTransactions.filter(t => {\n      if (!t.date) return false;\n      const [y, m] = String(t.date).split('-').map(v => parseInt(v, 10));\n      return y === year && m === month;\n    });\n    dispatch({\n      type: 'COMMIT_SELECTED_TRANSACTIONS',\n      payload: currentMonthSelected\n    });\n  }, [state.selectedTransactions]);\n  const myItemsThisMonthTotal = useMemo(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n    return state.committedTransactions.filter(t => {\n      if (!t.date) return false;\n      // Expecting YYYY-MM-DD\n      const [y, m] = String(t.date).split('-').map(v => parseInt(v, 10));\n      return y === year && m === month;\n    }).reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  }, [state.committedTransactions]);\n  useEffect(() => {\n    loadTransactions();\n    loadAnalytics();\n  }, []);\n\n  // Clear selections when the month changes and set current period marker\n  useEffect(() => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({\n        type: 'CLEAR_SELECTED_TRANSACTIONS'\n      });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n  }, []);\n  const value = {\n    ...state,\n    loadTransactions,\n    loadAnalytics,\n    loadCalendarData,\n    saveTransactions,\n    uploadFile,\n    dispatch,\n    toggleMyItem,\n    clearMyItems,\n    commitMyItems,\n    myItemsThisMonthTotal\n  };\n  return /*#__PURE__*/_jsxDEV(ExpenseContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseProvider, \"yR33iOs6TUmEPYMFbSDcOVivBRY=\");\n_c = ExpenseProvider;\nexport function useExpense() {\n  _s2();\n  const context = useContext(ExpenseContext);\n  if (!context) {\n    throw new Error('useExpense must be used within an ExpenseProvider');\n  }\n  return context;\n}\n_s2(useExpense, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ExpenseProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useMemo","useCallback","expenseAPI","jsxDEV","_jsxDEV","ExpenseContext","initialState","transactions","analytics","weekly","monthly","categories","calendar","summary","loading","error","selectedTransactions","committedTransactions","currentMonth","Date","getMonth","currentYear","getFullYear","expenseReducer","state","action","type","payload","exists","find","t","id","next","filter","month","year","ExpenseProvider","children","_s","dispatch","loadTransactions","response","getTransactions","data","message","loadAnalytics","Promise","all","getWeeklyAnalytics","getMonthlyAnalytics","getCategoryAnalytics","getSpendingSummary","loadCalendarData","getCalendarData","saveTransactions","uploadFile","file","toggleMyItem","transaction","now","period","String","padStart","stored","localStorage","getItem","setItem","clearMyItems","commitMyItems","currentMonthSelected","date","y","m","split","map","v","parseInt","myItemsThisMonthTotal","reduce","sum","Number","amount","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useExpense","_s2","context","Error","$RefreshReg$"],"sources":["/Users/manojvirinchichitta/ExpenseTracker/frontend/src/context/ExpenseContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useMemo, useCallback } from 'react';\nimport { expenseAPI } from '../services/api';\n\nconst ExpenseContext = createContext();\n\nconst initialState = {\n  transactions: [],\n  analytics: {\n    weekly: null,\n    monthly: null,\n    categories: null,\n    calendar: null,\n    summary: null\n  },\n  loading: false,\n  error: null,\n  selectedTransactions: [],\n  committedTransactions: [],\n  currentMonth: new Date().getMonth() + 1,\n  currentYear: new Date().getFullYear()\n};\n\nfunction expenseReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload, loading: false };\n    case 'SET_TRANSACTIONS':\n      return { ...state, transactions: action.payload, loading: false };\n    case 'ADD_TRANSACTIONS':\n      return { ...state, transactions: [...state.transactions, ...action.payload] };\n    case 'SET_ANALYTICS':\n      return { ...state, analytics: { ...state.analytics, ...action.payload } };\n    case 'SET_SELECTED_TRANSACTIONS':\n      return { ...state, selectedTransactions: action.payload };\n    case 'TOGGLE_SELECTED_TRANSACTION': {\n      const exists = state.selectedTransactions.find((t) => t.id === action.payload.id);\n      const next = exists\n        ? state.selectedTransactions.filter((t) => t.id !== action.payload.id)\n        : [...state.selectedTransactions, action.payload];\n      return { ...state, selectedTransactions: next };\n    }\n    case 'CLEAR_SELECTED_TRANSACTIONS':\n      return { ...state, selectedTransactions: [] };\n    case 'COMMIT_SELECTED_TRANSACTIONS':\n      return { ...state, committedTransactions: action.payload, selectedTransactions: [] };\n    case 'SET_CALENDAR_MONTH':\n      return { ...state, currentMonth: action.payload.month, currentYear: action.payload.year };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n}\n\nexport function ExpenseProvider({ children }) {\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n\n  const loadTransactions = async () => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const response = await expenseAPI.getTransactions();\n      dispatch({ type: 'SET_TRANSACTIONS', payload: response.data });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const loadAnalytics = async () => {\n    try {\n      const [weekly, monthly, categories, summary] = await Promise.all([\n        expenseAPI.getWeeklyAnalytics(),\n        expenseAPI.getMonthlyAnalytics(),\n        expenseAPI.getCategoryAnalytics(),\n        expenseAPI.getSpendingSummary()\n      ]);\n      \n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: {\n          weekly: weekly.data,\n          monthly: monthly.data,\n          categories: categories.data,\n          summary: summary.data\n        }\n      });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const loadCalendarData = async (year, month) => {\n    try {\n      const response = await expenseAPI.getCalendarData(year, month);\n      dispatch({\n        type: 'SET_ANALYTICS',\n        payload: { calendar: response.data }\n      });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const saveTransactions = async (transactions) => {\n    try {\n      const response = await expenseAPI.saveTransactions(transactions);\n      dispatch({ type: 'ADD_TRANSACTIONS', payload: response.data });\n      return response.data;\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const uploadFile = async (file) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const response = await expenseAPI.uploadFile(file);\n      dispatch({ type: 'SET_LOADING', payload: false });\n      return response.data;\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const toggleMyItem = useCallback((transaction) => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n    dispatch({ type: 'TOGGLE_SELECTED_TRANSACTION', payload: transaction });\n  }, []);\n\n  const clearMyItems = useCallback(() => {\n    dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n  }, []);\n\n  const commitMyItems = useCallback(() => {\n    // Commit only current month selections\n    const now = new Date();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n    const currentMonthSelected = state.selectedTransactions.filter((t) => {\n      if (!t.date) return false;\n      const [y, m] = String(t.date).split('-').map((v) => parseInt(v, 10));\n      return y === year && m === month;\n    });\n    dispatch({ type: 'COMMIT_SELECTED_TRANSACTIONS', payload: currentMonthSelected });\n  }, [state.selectedTransactions]);\n\n  const myItemsThisMonthTotal = useMemo(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n    return state.committedTransactions\n      .filter((t) => {\n        if (!t.date) return false;\n        // Expecting YYYY-MM-DD\n        const [y, m] = String(t.date).split('-').map((v) => parseInt(v, 10));\n        return y === year && m === month;\n      })\n      .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  }, [state.committedTransactions]);\n\n  useEffect(() => {\n    loadTransactions();\n    loadAnalytics();\n  }, []);\n\n  // Clear selections when the month changes and set current period marker\n  useEffect(() => {\n    const now = new Date();\n    const period = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n    const stored = localStorage.getItem('myItemsPeriod');\n    if (stored !== period) {\n      dispatch({ type: 'CLEAR_SELECTED_TRANSACTIONS' });\n      localStorage.setItem('myItemsPeriod', period);\n    }\n  }, []);\n\n  const value = {\n    ...state,\n    loadTransactions,\n    loadAnalytics,\n    loadCalendarData,\n    saveTransactions,\n    uploadFile,\n    dispatch,\n    toggleMyItem,\n    clearMyItems,\n    commitMyItems,\n    myItemsThisMonthTotal\n  };\n\n  return (\n    <ExpenseContext.Provider value={value}>\n      {children}\n    </ExpenseContext.Provider>\n  );\n}\n\nexport function useExpense() {\n  const context = useContext(ExpenseContext);\n  if (!context) {\n    throw new Error('useExpense must be used within an ExpenseProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}